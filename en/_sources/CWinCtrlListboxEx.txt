.. highlight:: csharp

.. _CWinCtrlListboxEx:

==============================
CWinCtrlListboxEx
==============================

 スクリプト: :ref:`LISTBOXEX`

 リストボックスのためのコントロールです。
 
 コンテンツを複製し、それを一行とします。
 
 コンテンツの数はメモリが許す限り自由に設定可能です。
 
 垂直方向にコンテンツが並んでいるリストボックスだけでなく、水平方向にも並べることも可能です。
 
 :ref:`LISTBOX` と違う点は、コンテンツサイズを自動的に計測するところです。
 
 垂直方向に並んでいる場合は、縦幅のみ自動計算の対象になります。

 それに対して水平方向に並んでいる場合は、横幅のみ自動計算の対象になります。

CWindowBaseに届くコールバック
-------------------------------------------------

.. cpp:function:: void onDrag(CWinCtrlBase cCtrl,Vector2 pos,Vector2 dragVelocity)

 :param CWinCtrlBase cCtrl: ドラッグされたコントロール
 :param Vector2	pos: ドラッグされているタッチ位置、若しくはマウスカーソルの位置(ウィンドウ上)
 :param Vector2 dragVelocity: タッチ位置の変位

 スクロールしたとき呼び出されます。
 移動を :ref:`ロック<LISTBOXEX_STYLE>` していてもこのコールバックは呼ばれます。


固有の関数/プロパティ
-------------------------------------------------

.. cpp:member:: Vector2 viewsize

 リストボックスのサイズとなります。
 sizeプロパティと同等です。

.. cpp:member:: Vector2 screensize

 リストボックスの仮想画面のサイズです。
 コンテンツリスト内の全ての高さの総和になります。

.. cpp:member:: Vector2 offset

 リストボックスが仮想画面のどこをポイントしているかを表しています。
 値を設定すると一気に移動します。
 滑らかにアニメーションさせながら移動させたいときは、 :ref:`setSmoothOffset<setSmoothOffset>` を使ってください。

.. cpp:member:: bool isSwipe

 スワイプ中かどうか判定します。

.. _setSmoothOffset:

.. cpp:function:: void setSmoothOffset(Vector2 offset,float spd)

 :param Vector2 offset: 設定したい最終オフセット
 :param float spd: 速度
 
 
.. cpp:member:: Vector2 smoothOffset

 0.25の速度で、 :ref:`setSmoothOffset<setSmoothOffset>` したのと同じ振る舞いになります。

.. cpp:member:: bool isSmoothScrolled

 setSmoothOffsetによるスクロールアニメーションかどうかを取得できます。

.. cpp:function:: Vector2 getContentsOffset(int index,e_Anchor eAnchor)
 
 :param int index: 取得したいコンテンツオフセットのインデックス
 :param e_Anchor eAnchor: コンテンツがどの位置に来ることを望むかをアンカーで指定する
 
 特定のコンテンツが指定したアンカー位置に沿って表示されるようなオフセットを取得できます。

 リストボックスが縦方向の時は次の通りです。

+------------------------------+--------------------------------------------+
|e_Anchor                      |位置                                        |
+==============================+============================================+
|Bottom,LeftBottom,RightBottom |コンテンツが一番下に来るようなオフセット値  |
+------------------------------+--------------------------------------------+
|Top,LeftTop,RightTop          |コンテンツが一番上に来るようなオフセット値  |
+------------------------------+--------------------------------------------+
|Center,Left,Right             |コンテンツが真ん中に来るようなオフセット値  |
+------------------------------+--------------------------------------------+

 リストボックスが横方向の時は次の通りです。

+------------------------------+--------------------------------------------+
|e_Anchor                      |位置                                        |
+==============================+============================================+
|Left,LeftBottom,LeftTop       |コンテンツが一番左に来るようなオフセット値  |
+------------------------------+--------------------------------------------+
|Right,RightBottom,RightTop    |コンテンツが一番右に来るようなオフセット値  |
+------------------------------+--------------------------------------------+
|Center,Top,Bottom             |コンテンツが真ん中に来るようなオフセット値  |
+------------------------------+--------------------------------------------+

使用例
-----------------------------

::

 override public void onUpdate() {
    // コントロールを取得する方法.
    CWinCtrlListboxEx	lbPartys = find<CWinCtrlListboxEx>(LISTBOXEX_Partys);

    // リストボックスの行数を設定.
    lbPartys.resize(10);

    // リストボックス内の状態を更新する(この場合10行更新することになる)
    for (int i = 0;i < lbPartys.Count;++i) {
        // リストボックスのコンテンツを一行取得する.
        CWinContents contents = lbPartys.getContentsFromIndex(i);

        //BUTTON(Name)を取得
        CWinCtrlButton btnName = contents.find<CWinCtrlButton>(BUTTON_Name);

        //ICON(Icon)を取得
        CWinCtrlIcon icnName = contents.find<CWinCtrlIcon>(ICON_Icon);

        //LISTBOX(Party)を取得
        CWinCtrlListbox lbParty = contents.find<CWinCtrlListbox>(LISTBOX_Party);
    }
 }

