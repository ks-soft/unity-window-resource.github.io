.. highlight:: csharp

.. _CWindowBase:

========================
CWindowBase
========================


ウィンドウクラスを作成する方法
-----------------------------------

 ウィンドウスクリプトをコンパイルし成功するとウィンドウバイナリファイルとそのウィンドウを使うためのベースファイルが生成されます。
 
 例えば、次の通りです。
 
::

  #include "wr.h"
  WINDOW(TEST) {
    ID = 255_000_00001;
    STYLE = WINDOW_STYLE_NOTITLEBAR|WINDOW_STYLE_ANCHOR_CENTER;
    POSITION = 0,-100;
    SIZE = 512,256;
  };

  TEXTBOX(Message) {
    ID = 000_000_00010;
    POSITION = 100,-80;
    CAPTION = 000_111_00020;
    EDIT = 255,2;
    SIZE = 380, 64;
  };

..

これをコンパイルすると、次のような **CTestBase.cs** が自動生成されます。

::

  public class TESTBase : CWindowBase {
      public const uint windowId = 4278190081;	// 255_000_00001
          static public TEST create(CWindowBase cParent = null) {
          return CWindowMgr.Instance.create<TEST>(windowId,cParent);
    }
    public const uint TEXTBOX_Message = 10;	// 000_000_00010
  };

..

アプリケーションに組み込むときは、このTestBaseを継承したウィンドウを作ってください。

::

  public class TEST : TestBase {
     :
  };

..

 そして、ウィンドウを実際にクリエイトするときは、次の通りにします。
 
::

  TEST test = TEST.create();

..

.. _callback:

各ウィンドウオブジェクトに届くコールバックについて
---------------------------------------------------

 ウィンドウは複数のコントロールから構成されています。
  
 コントロールに対してタッチやドラッグ等の操作を行うと、それに応じてウィンドウ内のコールバックが呼ばれます。
  
 受け取れるコールバックを下記に列挙しておきます。

 各ウィンドウを作成するというのは、ウィンドウスクリプトをコンパイルした際に生成されたクラスを継承し、これらコールバックをオーバライドする作業になります。

.. cpp:function:: virtual void onCreate()

 ウィンドウの初期化が終わった直後に呼ばれる。

.. cpp:function:: virtual void onUpdate()

 各コントロールのアップデート前に呼ばれる。

.. cpp:function:: virtual void onAfterUpdate()

 各コントロールのアップデート後に呼ばれる。

.. cpp:function:: virtual void onPreRender(CWindowRenderer cRenderer)

 コントロールのレンダリング前に呼ばれる。

.. cpp:function:: virtual  onRender(CWindowRenderer cRenderer)

 コントロールのレンダリングが終わった後に呼ばれる。

.. cpp:function:: virtual bool onClose(int iCloseInfo)

 ウィンドウを閉じたときに呼ばれる。

 true: ウィンドウを閉じる

 false: ウィンドウを閉じるのを抑制する

.. cpp:function:: virtual void onClick(CWinCtrlBase cCtrl)

 コントロールが押された。

.. cpp:function:: virtual void onHold(CWinCtrlBase cCtrl)

 コントロールが長押しされた。

.. cpp:function:: virtual void onClickEnter(CWinCtrlBase cCtrl)
 
  エディットボックスの入力が確定した。

.. cpp:function:: virtual void onClick(CWinCtrlBase cCtrl,CRichTextOne cText)

 リッチテキストの一部が押された

.. cpp:function:: virtual void onDrag(CWinCtrlBase cCtrl)

 コントロールがドラッグされた。

.. cpp:function:: virtual void onDrag(CWinCtrlBase cCtrl,Vector2 pos)

 コントロールがドラッグされ、移動している。

.. cpp:function:: virtual void onDragRender(CWinCtrlBase cCtrl,CWindowRenderer renderer,Vector2 pos)

 コントロールがドラッグされているときに、レンダリングタイミングで呼ばれる。
 overrideしなければ普通にコントロールがレンダリングされる。
 
.. cpp:function:: virtual void onDrop(CWinCtrlBase cCtrl,CWindowBase cDragWindow,CWinCtrlBase cDragCtrl)

 特定ウィンドウのコントロール上でドラッグ中のコントロールが離されたとき呼ばれる。
 
.. cpp:function:: virtual void onDropGround(CWinCtrlBase cCtrl,CWindowBase cDragWindow,CWinCtrlBase cDragCtrl)

 何もないところでドラッグ中のコントロールが離されたとき呼ばれる。

.. cpp:function:: virtual void onOK(int msgBoxWinID)

 子ウィンドウとしてクリエイトしたメッセージウィンドウ上でOKボタンが押された。

.. cpp:function:: virtual void onNext(int msgBoxWinID)

 子ウィンドウとしてクリエイトしたメッセージウィンドウ上でNextボタンが押された。

.. cpp:function:: virtual void onYes(int msgBoxWinID)

 子ウィンドウとしてクリエイトしたメッセージウィンドウ上でYesボタンが押された。

.. cpp:function:: virtual void onNo(int msgBoxWinID)

 子ウィンドウとしてクリエイトしたメッセージウィンドウ上でNoボタンが押された。

.. cpp:function:: virtual void onCancel(int msgBoxWinID)

 子ウィンドウとしてクリエイトしたメッセージウィンドウ上でCancelボタンが押された。

.. cpp:function:: virtual void onScroll(CWinCtrlBase cCtrl,Vector2 velocity)

 リストボックス、コンテナをドラッグし、スクロールした。

.. cpp:function:: virtual void onRecreatedRenderTexture(uint mRenderTextureId)

 レンダーテクスチャが何らかのイベントによって、消失したとき呼ばれる。
 ただし、自動復帰はシステム側が行うので基本オーバーライドする必要はない。

ウィンドウオブジェクトの持つ主なプロパティ/メソッド
---------------------------------------------------
 ここでは、CWindowBaseが持つアクセス可能なメソッド、プロパティについて列挙しておきます。
 
 
.. cpp:function:: void close(int iCloseInfo = 0)

 ウィンドウを閉じたいときに呼び出す。
 iCloseInfoは、onCloseのパラメータとして渡されます。

.. _CWindowBase_find:

.. cpp:function:: WinCtrl find<WinCtrl>(uint id)

 該当するIDを持つコントロールを探す。

.. cpp:function:: CWinCtrlBase find(uint id)

 該当するIDを持つコントロールを探す。

.. cpp:member:: uint id

 ウィンドウIDを取得/設定する。

.. cpp:member:: CWindowBase child

 子ウィンドウを返す。

.. cpp:member:: CWindowBase parent

 親ウィンドウを返す。

.. cpp:member:: e_LayerId layer

 レンダリングレイヤーを取得/設定します。
 
.. cpp:member:: int priority

 描画プライオリティを取得/設定します。
 
.. cpp:member:: uint texid

 ウィンドウのデフォルトテクスチャIDを返す。
 
.. cpp:member:: float x
.. cpp:member:: float y

 ウィンドウ座標を取得/設定する。

.. cpp:member:: Vector2 position

 ウィンドウ座標を取得/設定する。
 
.. cpp:member:: Transform transform

 Transformを取得する。

.. cpp:member:: Vector2 scale

 x,yスケールを取得/設定する。

.. cpp:member:: e_Anchor anchor

 表示位置の基準アンカー設定を変更する。

.. cpp:member:: float width
.. cpp:member:: float height

 ウィンドウのサイズを取得/設定する。

.. cpp:member:: Vector2 size

 ウィンドウのサイズを取得/設定する。

.. cpp:member:: float screenWidth
.. cpp:member:: float screenHeight

 表示スクリーンサイズの取得/設定する。

.. cpp:member:: string caption

 ウィンドウのタイトルバーキャプションを取得/設定する。
 
.. cpp:member:: WinColor captionColor

 ウィンドウのタイトルバーキャプションカラーを取得/設定する。

.. cpp:member:: Vector2 captionOffset

 ウィンドウのタイトルバーキャプション表示オフセットを取得/設定する。

.. cpp:member:: WinColor color

 ウィンドウカラーを設定します。
 配下にあるコントロールは全て影響受けます。

.. cpp:member:: e_WinStyle style

 ウィンドウスタイルを取得します。

.. cpp:member:: e_WinStyle priorityStyle

 プライオリティスタイルを設定/取得する。

.. cpp:member:: bool hide

  true
   ウィンドウ表示を隠す。
  false
   ウィンドウを表示する。

.. cpp:member:: bool disable

  true
   ウィンドウの機能を奪い暗くする。
  false
   ウィンドウを通常表示する。
 
 ウィンドウ機能を奪うと、タッチしても反応しなくなります。

.. cpp:member:: bool isClose

 ウィンドウがクローズアニメーション中ならtrueになります。

.. cpp:member:: bool isLoaded

 テクスチャ等の読み込みが行われているときtrueになります。

.. cpp:member:: bool isFade

 ウィンドウがフェードイン/フェードアウト中ならtrueになります。

その他オーバーライド可能なメソッド
--------------------------------------------
 コールバック以外にオーバライド可能なメソッドが存在します。
 特にウィンドウをクリエイトしたとき/クローズしたときに行うフェードアニメーションをカスタマイズしたいときは
 オーバライドする必要があります。
 
.. cpp:function:: protected virtual void startFade(e_FadeState eState)

 フェードが始まった時に呼ばれる。
 フェードイン/フェードアウトは、e_FadeStateを見て判断できる。
 フェード処理で必要な初期化を行ってください。

   e_FadeState.Open
    フェードイン 
   e_FadeState.Close
    フェードアウト

.. cpp:function:: protected virtual bool doFade(e_FadeState eState)

 フェード中に呼ばれます。

   true
    フェード中
   false
    フェード終了
 
 フェードが終了したら、falseを返すようにしてください。
 
 また、e_FadeState.Noneがわたってきたときも、falseを返すようにしてください。

  e_FadeState.None
   フェードしていない
  e_FadeState.Open
   フェードイン中
  e_FadeState.Close
   フェードアウト中
