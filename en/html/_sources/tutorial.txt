.. highlight:: csharp

===================================
チュートリアル
===================================

最初に
--------------------------------------

 当ウィンドウシステムの特徴は、次の通りです。
 
 ウィンドウベースのシステム

   ウィンドウベースのシステムによって、画面遷移などが楽になります。
   また、ウィンドウ同士をスタックすることが可能なので、ウィンドウを開く前の状態に戻すのが楽になります。

 複数人で分業しても破綻しないシステム

   複数人で開発するとき、多くの場合バージョンコントロールソフト(gitやsvn)を使います。
   この時、マージがし辛い従来のGUIシステムでは開発に支障をきたしやすいです。
   当ウィンドウシステムは、独自のGUI構築スクリプト言語を用意し、ウィンドウを簡易に記述できるようにしています。
   これによってマージがしやすい環境を提供します。
 
 強力で簡単/シンプルなウィンドウ記述言語

   ウィンドウ定義を記述するためのスクリプトは簡単に記述でき、またシンプルです。
   このスクリプト言語の特徴は、簡単なプロパティを設定する程度のものです。
   ただ、単純といえども十分パワフルで、ラジオボタンの排他制御、タブ制御等記述可能になっています。
   また、ウィンドウオープン/クローズ時のアニメーションなどもスクリプト内に記述できます。

 柔軟なレイアウト

   画面サイズが変わってもレイアウトが崩れないように、座標の指定を柔軟に設定可能になっています。
   
 開発効率の良いテクスチャアトラス
 
   当ウィンドウシステムがサポートするテクスチャアトラスは、従来のUnityの持つテクスチャアトラスを一段進化させたものになっています。
   テクスチャアトラス化するときパッチ方法を個別に指定することができます。
   パッチとは、テクスチャの拡大縮小方法で、両端を固定し真ん中だけ伸ばしたりするように指定できます。
   また、アトラス化する際、テクスチャを32bitから16bitに自動的に減色します。
   この時、テクスチャ毎に単純な減色か、ディザリングして高品位に減色するかを個別に設定可能になっています。
  
 多言語対応可能なキャプション
 
   文字リソースを外部から渡すことが可能になっており、多言語対応が可能なシステムになっています。
 
 ウィンドウシステムは、ウィンドウを編集する環境とウィンドウを実際使ってアプリケーションを構築する環境を分離(別プロジェクトに)することが可能になっています。
 これによって、ウィンドウのレイアウトを修正している間も、アプリケーションを自由に作ることが可能になっています。
 当然、一つの環境で開発することも可能です。

スクリプト作成/編集方法
----------------------------------

 #. AssetBuilderを起動します。
 #. プロジェクト内のWindowResourceフォルダ(Assets/WindowResource)の直下にwraファイルを作成します。
 #. wraファイル上で右クリックし、Exportを選びます。

  好みのエディタで編集してください。

  ファイル名は、 ウィンドウ名.wra(例: CMessageWindow.wra)という形式でつけてください。
  ファイルのエンコーディングは、UTF8です。

インクルードパス
^^^^^^^^^^^^^^^^^^^^^^^

 以下のパスにインクルードパスが、通っています。
 インクルードファイルを作成する際は、ファイルをここに置いてください。

::
 
  Assets/WindowResource/include

..

wraファイルをコンパイルするときにインクルードされるファイル
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 次のファイルは、wraファイルをコンパイルするときに、自動的にインクルードされます。
 共通の設定や定数は、このファイルに設定されています。
 
::

 Assets/WindowResource/include/wr.h

..


 .. image:: images/edit.png

コンパイルされたファイルの場所
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 AssetBuilder/wrbというフォルダの直下に、\*.wrbというファイルが生成されています。
 このファイルがコンパイルされたファイルです。

ウィンドウビューワー
----------------------------------

 コンパイルしたウィンドウをビューワーですぐ確認できます。

 また、一度コンパイルに成功したウィンドウはビューワーを起動しっ放しでも変更を確認できます。

 ただし、新規で追加したウィンドウを確認したい場合は、一度ウィンドウビューワを終わらせて再起動してください。
 
#. シーン WWindowViewerを選択し、実行してください。

   シーン実行中もスクリプトのコンパイルはできます。

#. リストが表示されるので、所定のウィンドウを選んでください。

#. コンパイル結果のウィンドウが表示されます。

 .. image:: images/viewer.png


アセットバンドル/リソースデータ化
----------------------------------

 HTTP経由でウィンドウデータをダウンロードする形にすることが可能です。

 Unity上のメニューの[KsTools]→[Export Window Resource]を選ぶとassetbundlesフォルダにアセットファイルが出力されます。

 ファイル名は、 デフォルトで **000_014_00000.unity3d** です。
 WINDOWプロパティ: :ref:`RESOURCE = マルチID <resource_a>` を用いて、出力先を変更できます。

 同じ :ref:`マルチID<MulID>` を指定したウィンドウデータは、一つのアセットとして纏めた状態で出力します。
 また、アセットバンドルの情報を格納した **version.unity3d** も併せて更新されます。
 
 CAssetBundleMgrは、 **version.unity3d** を起動時に一度読み込み、アセットバンドルが更新されているかどうかをチェックします。

|

 WINDOWプロパティ: :ref:`RESOURCE = パス <resource_ab>` を用いて、アセットデータとして出力することもできます。
 同じパスを指定したウィンドウデータは、一つのアセットバンドルとして纏めた状態で出力します。

  .. image:: images/export.png


実際のゲーム内でウィンドウを扱う方法
--------------------------------------

 ウィンドウ作成環境とアプリケーションを分ける/分けないにかかわらず同じ方法で扱えます。

CMainSystemを作成/編集する
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: csharp

  public class CMainSystem : CMainSystemBase {
      //==========================================================================
      /*!Awake
       * @brief    Unity Callback
      */
      new void Awake() {
          Application.targetFrameRate = 60;
          base.Awake();

          if (m_instance != null) {
              Debug.LogError("already exist CMainSystem");
              return;
          }
          m_instance = this;

          // Add Component
          gameObject.AddComponent<CInput>();
          gameObject.AddComponent<CSpriteFontMgr>();
          gameObject.AddComponent<CTextureResourceMgr>();
          gameObject.AddComponent<CWindowMgr>();
      }
      //==========================================================================
      /*!初期化を行う.
       * @brief    initialize
      */
      override protected void initialize() {
          base.initialize();
      }
      //==========================================================================
      /*!Instance.
          @brief    Instance.
      */
      static private CMainSystem    m_instance = null;
      new public static CMainSystem Instance {
          get {
              return m_instance;
          }
      }
  }

..


CMainSystemをゲームオブジェクトに登録
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 下記の通り、MainSystemという空のゲームオブジェクトを作成し、そこにCMainSystemをスクリプトとして追加します。

 .. image:: images/MainSystem.png

 CMainSystemは、:ref:`CMainSystemBase<CMainSystemBase>` を継承するようにしてください。
 CMainSystemを張り付けたゲームオブジェクトは、シーンを読み込んでも自動的に破壊されないように設定されています(DontDestroyOnLoad参照)。
 
 最低限ウィンドウシステムを使用するために必要なスクリプトは下記の４つです。
 
 詳しくは、:ref:`こちら<CMainSystemBase>` を参照ください。
 
CInput
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 入力を監視するスクリプトです。
 必須です。

CSpriteFontMgr
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 フォントテクスチャ、フォントデータを管理しています。
 文字を出すために必須です。

 CAssetBundleMgrをゲームオブジェクトにアタッチし、アセットデータが存在するときは、フォントデータをダウンロードして使うことができます。

 詳しくは、:ref:`こちら<SpriteFont>` を参照ください。

CTextureResourceMgr
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 アトラス化したテクスチャリソースを管理しています。
 必須です。

 CAssetBundleMgrをゲームオブジェクトにアタッチし、アセットデータが存在するときは、テクスチャデータをダウンロードして使うことができます。
 
 詳しくは、:ref:`こちら<CTextureResourceMgr>` を参照ください。
 
CAssetBundleMgr
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 アセットバンドルを管理しています。
 
 効果音、ウィンドウレイアウトデータ、テクスチャデータ、フォントデータ等全てアセットバンドル化し、読み込むことが可能です。
 
 アセットバンドルを使用しないときは、必要ありません。
 
 マネージャ自身はアセットバンドルの中身については関与しません。

 詳しくは、:ref:`こちら<CAssetBundleMgr>` を参照ください。

CWindowMgr
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 ウィンドウを管理しています。
 必須です。

 詳しくは、:ref:`こちら<CWindowMgr>` を参照ください。


リソースから読み込むとき
"""""""""""""""""""""""""""""

 Resourcesフォルダに配置した、アセットを読み込みます。

 一度、読み込むと、ウィンドウデータは常駐します。

.. code-block:: csharp

 CWindowMgr cWindowMgr = CWindowMgr.Instance; 
 cWindowMgr.load("windows");

..

アセットバンドルから読み込むとき
""""""""""""""""""""""""""""""""""

 **[Export Window Resource]** を行うと次の二つのファイルが更新されます(PC,Mac & Linux Standalone環境の場合)。
 
 * assetbundles/Windows/000_014_00000.unity3d
 * assetbundles/Windows/version.unity3d

 CConfigDefault.httpserverが、正しいHTTPサーバのフォルダを指しているかを確認します。


ウィンドウをクリエイトする方法
""""""""""""""""""""""""""""""""""
例えば、このような名前でウィンドウを定義したとします。

.. code-block:: csharp

 WINDOW(001_000_00000) {
    RESOURCE = "Assets/Resources/windows";
    PATH = NETWORKPATH;
    TEX_ID = 100_000_00000;
    CAPTION = 000_000_0000;
    STYLE = WINDOW_STYLE_NOTITLEBAR|WINDOW_STYLE_NOFRAME|WINDOW_STYLE_NODRAG|WINDOW_STYLE_ANCHOR_CENTER|WINDOW_STYLE_TOP;
    SIZE = RELATIVE_SIZE(0),RELATIVE_SIZE(0);
    PRIORITY = PROGRESSBAR_PRIORITY;
 };

..

 そうすると、CWinAssetbundleLoadingBase.csというC#スクリプトが生成されています。
 これを継承した、CWinAssetbundleLoadingクラスを作ります。
 
 次のようにCWinAssetbundleLoadingBase.create()を使ってウィンドウを作成できます。
 
.. code-block:: csharp
 
 CWinAssetbundleLoading.create();

..

 自動生成された、CWinAssetbundleLoadingBaseには、次のような関数が生成されています。

::

 static public CWinAssetbundleLoading create(CWindowBase cParent = null) {
     return CWindowMgr.Instance.create<CWinAssetbundleLoading>(windowId,cParent);
 }

..



クリエイト済のウィンドウを取得する方法
""""""""""""""""""""""""""""""""""""""""

 クリエイト済のウィンドウをウィンドウマネージャ経由で :ref:`find<window_find_function>` を使って取得することができます。

.. code-block:: csharp

 CWinAssetbundleLoading	cLoading = CWindowMgr.Instance.find<CWinAssetbundleLoading>(CWinAssetbundleLoading.windowId);
 if (cLoading != null) {
    //クリエイト済のウィンドウが見つかった!
 } else {
    //ウィンドウは、クリエイトしていない.
 }

..


特定のウィンドウを全面に出す方法
""""""""""""""""""""""""""""""""""""""""

ウィンドウマネージャが持つ、bringToTopを使って、特定のウィンドウを最前面に出すことができます。

.. code-block:: csharp

 CWindowMgr.Instance.bringToTop(cWindow);

..

効果音について
"""""""""""""""""""""""""""""

 効果音を鳴らすには、CWindowMgr.soundeffectを書き換えます。
 
 soundeffectは、IWinSoundEffectというインターフェースを持つオブジェクトです。

.. code-block:: csharp

 public interface IWinSoundEffect {
     void play(uint mSE);
 }
 
..

 付属している :ref:`CSeResourceMgr<CSeResourceMgr>` と連動させる一つの例です。

 :ref:`CSeResourceMgr<CSeResourceMgr>` 経由で、アセットバンドル化されたSEを取得します(一つのアセットバンドルに複数のSEが入っています)。
 
 取得した、:ref:`CSeResource<CSeResource>` は、IWinSoundEffectインターフェースを持っています。
 (音を実際、鳴らすには :ref:`CSoundEffectMgr<CSoundEffectMgr>` もCMainSystemにAddComponentしておく必要があります)。

 下記の例では、052_000_00000内にウィンドウ系の効果音がパックされているという前提の実装になっています。

.. note::

 自作したIWinSoundEffectを持つオブジェクトと関連付けることも可能です。

..

.. code-block:: csharp

 public class CMainSystem : CMainSystemBase {
     //==========================================================================
     /*!Awake
     * @brief	Unity Callback
     */
     new void Awake() {
         base.Awake();

         if (m_instance != null) {
             Debug.LogError("already exist CMainSystem");
             return;
         }
         m_instance = this;

         // Add Component
         gameObject.AddComponent<CInput>();
         gameObject.AddComponent<CAssetBundleMgr>();
         gameObject.AddComponent<CSpriteFontMgr>();
         gameObject.AddComponent<CTextureResourceMgr>();
         gameObject.AddComponent<CWindowMgr>();
         gameObject.AddComponent<CBgmResourceMgr>();
         gameObject.AddComponent<CSeResourceMgr>();
         gameObject.AddComponent<CSoundEffectMgr>();
     }
     //==========================================================================
     /*!Initialize.
     * @brief	initialize
     */
     override protected void initialize() {
         base.initialize();
         //--------------------------------------------
         // WindowMgr initilaize.
         //--------------------------------------------
         CWindowMgr	cWindowMgr = CWindowMgr.Instance;
         // Assign standard SEs.
         cWindowMgr.soundeffect = CSeResourceMgr.Instance.reference(new MulId(52,0,0));	//2D系;
         cWindowMgr.clickSE = new MulId(52,0,20);
         cWindowMgr.scrollSE = new MulId(52,0,110);
     }
     //==========================================================================
     /*!Instance.
     @brief	Instance.
     */
     static private CMainSystem	m_instance = null;
         new public static CMainSystem Instance {
             get {
                  return m_instance;
             }
         }
     }
 }
 
..


多言語対応、文字リソースをアセットバンドルにする方法
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

 キャプションIDから、文字列に変換する際、CWindowMgr.captiondataに設定されたオブジェクトを通して変換されます。

 captiondataは、IWinCaptionDataインターフェースです。
 
 現在のロケールに応じて返す文字列を変えることによって多言語対応が可能になっています。

.. code-block:: csharp

 public interface IWinCaptionData {
     string find(uint mCaptionId);
 }

..

 付属している :ref:`CMessageDataSheetMgr<CMessageDataSheetMgr>` と連動させるための一つの例です。

 :ref:`CMessageDataSheet<CMessageDataSheet>` が、IWinCaptionDataインターフェースを持っているので次のようなコードでキャプションデータを取得できます。

.. code-block:: csharp
 
 public class CMainSystem : CMainSystemBase {
     //==========================================================================
     /*!Awake
     * @brief	Unity Callback
     */
     new void Awake() {
         base.Awake();
         if (m_instance != null) {
             Debug.LogError("already exist CMainSystem");
             return;
         }
         m_instance = this;

         // Add Component
         gameObject.AddComponent<CInput>();
         gameObject.AddComponent<CAssetBundleMgr>();
         gameObject.AddComponent<CSpriteFontMgr>();
         gameObject.AddComponent<CTextureResourceMgr>();
         gameObject.AddComponent<CWindowMgr>();
         gameObject.AddComponent<CBgmResourceMgr>();
         gameObject.AddComponent<CSeResourceMgr>();
         gameObject.AddComponent<CSoundEffectMgr>();

         addManager(new CMessageDataSheetMgr(Utility.getSystemLocale()));
     }
     //==========================================================================
     /*!Initialize
     * @brief	initialize
     */
     override protected void initialize() {
         base.initialize();
         //--------------------------------------------
         // WindowMgr initialize.
         //--------------------------------------------
         CWindowMgr	cWindowMgr = CWindowMgr.Instance;
         cWindowMgr.captiondata = CMessageDataSheetMgr.Instance.find(new FiveCC("WNDW"));
         // Assign standard SEs
         cWindowMgr.soundeffect =  CSeResourceMgr.Instance.reference(new MulId(52,0,0));;
         cWindowMgr.clickSE = new MulId(52,0,20);
         cWindowMgr.scrollSE = new MulId(52,0,110);
     }
     //==========================================================================
     /*!Instance.
     @brief	Instance.
     */
     static private CMainSystem	m_instance = null;
         new public static CMainSystem Instance {
             get {
                  return m_instance;
             }
         }
     }
 }
 
..

.. note::

 自作したIWinCaptionDataを持つオブジェクトと関連付けることも可能です。

..
