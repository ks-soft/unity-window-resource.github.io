.. highlight:: csharp

.. _feature:

===================================
特徴
===================================


 当ウィンドウシステムの特徴は、次の通りです。
 
 ウィンドウベースのシステム

   ウィンドウベースのシステムによって、画面遷移などが楽になります。
   また、ウィンドウ同士をスタックすることが可能なので、ウィンドウを開く前の状態に戻すのが楽になります。

 複数人で分業しても破綻しないシステム

   複数人で開発するとき、多くの場合バージョンコントロールソフト(gitやsvn)を使います。
   この時、マージがし辛い従来のGUIシステムでは開発に支障をきたしやすいです。
   当ウィンドウシステムは、独自のGUI構築スクリプト言語を用意し、ウィンドウを簡易に記述できるようにしています。
   これによってマージがしやすい環境を提供します。
 
 ウィンドウデータとプログラムを完全に分離
 
 強力で簡単/シンプルなウィンドウ記述言語

   ウィンドウ定義を記述するためのスクリプトは簡単に記述でき、またシンプルです。
   このスクリプト言語の特徴は、簡単なプロパティを設定する程度のものです。
   ただ、単純といえども十分パワフルで、ラジオボタンの排他制御、タブ制御等記述可能になっています。
   また、ウィンドウオープン/クローズ時のアニメーションなどもスクリプト内に記述できます。

 柔軟なレイアウト

   画面サイズが変わってもレイアウトが崩れないように、座標の指定を柔軟に設定可能になっています。

 開発効率の良いテクスチャアトラス
 
   当ウィンドウシステムがサポートするテクスチャアトラスは、従来のUnityの持つテクスチャアトラスを一段進化させたものになっています。
   テクスチャアトラス化するときパッチ方法を個別に指定することができます。
   パッチとは、テクスチャの拡大縮小方法で、両端を固定し真ん中だけ伸ばしたりするように指定できます。
   また、アトラス化する際、テクスチャを32bitから16bitに自動的に減色します。
   この時、テクスチャ毎に単純な減色か、ディザリングして高品位に減色するかを個別に設定可能になっています。

 高速なレンダリング
  
  複数のコントロールを一つのメッシュにまとめてレンダリングするようになっています。
  ドローコールの最適化が自動的に行われ、複雑な画面でも十分快適なGUIを提供することが可能になっています。
  
 多言語対応可能なキャプション
 
   文字リソースを外部から渡すことが可能になっており、多言語対応が可能なシステムになっています。
 
 ウィンドウシステムは、ウィンドウを編集する環境とウィンドウを実際使ってアプリケーションを構築する環境を分離(別プロジェクトに)することが可能になっています。
 これによって、ウィンドウのレイアウトを修正している間も、アプリケーションを自由に作ることが可能になっています。
 当然、一つの環境で開発することも可能です。
 
